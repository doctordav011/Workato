{
  title: 'Kizen',

  #Please add all of these triggers and actions to the public version of our app. 
  connection: {
    fields: [
      {
        name: 'Business_ID',
        optional: false,
        hint: "Found on the API Keys settings Page - https://app.kizen.com/business/api-keys"
      },
      {
        name: 'Api_Key',
        optional: false,
        hint: "Found on the API Keys settings Page - https://app.kizen.com/business/api-keys"
      },
      {
        name: 'User_ID',
        optional: false,
        hint: "Found on the API Keys settings Page - https://app.kizen.com/business/api-keys"
      }
    ],

    authorization: {
      type: 'custom_auth',

      apply: lambda do |connection|
        headers('X-USER-ID': connection['User_ID'])
        headers('X-API-KEY': connection['Api_Key'])
        headers('X-BUSINESS-ID': connection['Business_ID'])
      end
    },
    base_uri: lambda do
      'https://app.kizen.com'
    end
  },
  methods: {
    # Special characters methods
    format_payload: lambda do |payload|
      if payload.is_a?(Array)
        payload.map do |array_value|
          call('format_payload', array_value)
        end
      elsif payload.is_a?(Hash)
        payload.map do |key, value|
          key = call('inject_special_characters', key)
          if value.is_a?(Array) || value.is_a?(Hash)
            value = call('format_payload', value)
          end
          { key => value }
        end.inject(:merge)
      end
    end,
    
    
    format_schema: lambda do |schema|
      if schema.is_a?(Array)
        schema.map do |array_value|
          call('format_schema', array_value)
        end
      elsif schema.is_a?(Hash)
        schema.map do |key, value|
          if %w[name].include?(key.to_s)
            value = call('replace_special_characters', value.to_s)
          elsif %w[properties toggle_field].include?(key.to_s)
            value = call('format_schema', value)
          end
          { key => value }
        end.inject(:merge)
      end
    end,
    
    
    replace_special_characters: lambda do |input|
      input.gsub(/[-<>!@#$%^&*()+={}:;'"`~,.?|]/,
                 '-' => '__hyp__',
                 '<' => '__lt__',
                 '>' => '__gt__',
                 '!' => '__excl__',
                 '@' => '__at__',
                 '#' => '__hashtag__',
                 '$' => '__dollar__',
                 '%' => '__percent__',
                 '^' => '__pwr__',
                 '&' => '__amper__',
                 '*' => '__star__',
                 '(' => '__lbracket__',
                 ')' => '__rbracket__',
                 '+' => '__plus__',
                 '=' => '__eq__',
                 '{' => '__rcrbrack__',
                 '}' => '__lcrbrack__',
                 ';' => '__semicol__',
                 '\'' => '__apost__',
                 '`' => '__bckquot__',
                 '~' => '__tilde__',
                 ',' => '__comma__',
                 '.' => '__period__',
                 '?' => '__qmark__',
                 '|' => '__pipe__',
                 ':' => '__colon__',
                 '\"' => '__quote__')
    end,
    
    
    inject_special_characters: lambda do |input|
      input.gsub(
        /(__hyp__|__lt__|__gt__|__excl__|__at__|__hashtag__|__dollar__|\__percent__|__pwr__|__amper__|__star__|__lbracket__|__rbracket__|__plus__|__eq__|__rcrbrack__|__lcrbrack__|__semicol__|__apost__|__bckquot__|__tilde__|__comma__|__period__|__qmark__|__pipe__|__colon__|__quote__|__slash__|__bslash__)/,
        '__hyp__' => '-',
        '__lt__' => '<',
        '__gt__' => '>',
        '__excl__' => '!',
        '__at__' => '@',
        '__hashtag__' => '#',
        '__dollar__' => '$',
        '__percent__' => '%',
        '__pwr__' => '^',
        '__amper__' => '&',
        '__star__' => '*',
        '__lbracket__' => '(',
        '__rbracket__' => ')',
        '__plus__' => '+',
        '__eq__' => '=',
        '__rcrbrack__' => '{',
        '__lcrbrack__' => '}',
        '__semicol__' => ';',
        '__apost__' => '\'',
        '__bckquot__' => '`',
        '__tilde__' => '~',
        '__comma__' => ',',
        '__period__' => '.',
        '__qmark__' => '?',
        '__pipe__' => '|',
        '__colon__' => ':',
        '__quote__' => '"'
      )
    end,
    
    
    format_response: lambda do |payload|
      if payload.is_a?(Array)
        payload.map do |array_value|
          call('format_response', array_value)
        end
      elsif payload.is_a?(Hash)
        payload.map do |key, value|
          key = call('replace_special_characters', key)
          if value.is_a?(Array) || value.is_a?(Hash)
            value = call('format_response', value)
          end
          { key => value }
        end.inject(:merge)
      end
    end
  },
  
  
  object_definitions: {

    contact_fields_input: {
      fields: lambda do |_|
        custom_fields = get('/api/client-field')&.
          map do |field|
            { name: "#{field['id']}~#{field['lookup_key']}",
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'first_name' },
          { name: 'last_name' },
          { name: 'email', optional: false},
          { name: 'mobile_phone' },
          { name: 'company',
            hint: 'The company at which the candidate currently works' },
          { name: 'titles', hint: 'The candidate’s current title' },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
      log_activity_input: {
      fields: lambda do |_|
        custom_fields = get('/api/activity-type')&.
          map do |field|
            { name: "#{field['id']}~#{field['uid']}",
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'client', label: 'Contact ID', optional: false },
          { name: 'activity_type_id',label: 'Activity', control_type: 'select', pick_list: 'activities', optional: false, toggle_hint: 'Select from list',
          toggle_field:{
            name: 'activity_id', label: 'Activity id', type: :string, control_type: "text", optional:false, toggle_hint: "Use Activity ID"}
           },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
    contact_fields_output: {
      fields: lambda do |_|
        custom_fields = get('/api/client-field')&.
          map do |field|
            { name: field['id'],
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id', type: 'integer', control_type: 'number',
            label: 'Contact id' },
          { name: 'first_name' },
          { name: 'last_name' },
          { name: 'email' },
          { name: 'mobile_phone' },
          { name: 'company',
            hint: 'The company at which the candidate currently works' },
          { name: 'titles', hint: 'The candidate’s current title' },
          { name: 'created', type: 'date_time', control_type: 'date_time' },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    company_fields_input: {
      fields: lambda do |_|
        custom_fields = get('/api/company-field')&.
          map do |field|
            { name: "#{field['id']}~#{field['lookup_key']}",
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'name', label: "Company Name", optional: false},
          { name: 'email' },
          { name: 'mobile_phone' },
          { name: 'business_phone' },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
  
  company_fields_input2: {
      fields: lambda do |_|
        custom_fields = get('/api/company-field')&.
          map do |field|
            { name: "#{field['id']}~#{field['lookup_key']}",
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'name', label: "Company Name", optional: true},
          { name: 'id', label: "Company ID", optional: false},
          { name: 'email' },
          { name: 'mobile_phone' },
          { name: 'business_phone' },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
    company_fields_output: {
      fields: lambda do |_|
        custom_fields = get('/api/company-field')&.
          map do |field|
            { name: field['id'],
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id', type: 'integer', control_type: 'number',
            label: 'Company id' },
          { name: 'name', label: "Company Name"},
          { name: 'email' },
          { name: 'mobile_phone' },
          { name: 'business_phone' },
          { name: 'created', type: 'date_time', control_type: 'date_time' },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
    deal_fields_input: {
      fields: lambda do |_|
        custom_fields = get('/api/deal-custom-field')&.
          map do |field|
            { name: "#{field['id']}~#{field['lookup_key']}",
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'name', label: "Deal Name", optional: false},
          { name: 'amount',type:'integer', label: "Deal Amount"},
          { name: 'estimated_close_date', label: "Estimated Close Date"},
          { name: 'stage', optional: false },
          { name: 'pipeline',label: 'Pipeline', control_type: 'select', pick_list: 'pipelines', optional: false, toggle_hint: 'Select from list',
          toggle_field:{
            name: 'pipeline_id', label: 'pipeline id', type: :string, control_type: "text", optional:false, toggle_hint: "Use Pipeline ID"}
          },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
  
    deal_fields_input2: {
      fields: lambda do |_|
        custom_fields = get('/api/deal-custom-field')&.
          map do |field|
            { name: "#{field['id']}~#{field['lookup_key']}",
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id', label: "Deal ID", optional: false, hint: "Get this from a previous step or inside Kizen's deal card"},
          { name: 'name', label: "Deal Name", optional: true},
          { name: 'amount',type:'integer', label: "Deal Amount"},
          { name: 'estimated_close_date', label: "Estimated Close Date",hint: "Format is YYYY-MM-DDThh:mm:ss"},
          { name: 'stage', label: "StageID", optional: true }, 
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
    deal_fields_output: {
      fields: lambda do |_|
        custom_fields = get('/api/deal-custom-field')&.
          map do |field|
            { name: field['id'],
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id', type: 'integer', control_type: 'number',
            label: 'Deal id' },
          { name: 'name', label: "Deal Name"},
          { name: 'amount',type:'integer', label: "Deal Amount"},
          { name: 'owner' },
          { name: 'close_date', type: 'date_time', control_type: 'date_time' },
          { name: 'estimated_close_date', type: 'date_time', control_type: 'date_time' },
          { name: 'created', type: 'date_time', control_type: 'date_time' },
          { name: 'updated', type: 'date_time', control_type: 'date_time' },
          { name: 'stage' },
          { name: 'pipeline' },
          { name: 'custom_fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },

    
    company_fields_trigger_output: {
      fields: lambda do |_|
        custom_fields = get('/api/company-field')&.
          map do |field|
            { name: field['handle'],
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id', type: 'integer', control_type: 'number',
            label: 'Company id' },
          { name: 'name',label: 'Company Name' },
          { name: 'business_phone' },
          { name: 'email' },
          { name: 'mobile_phone' },
          { name: 'custom', label: 'Custom fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
    contact_fields_trigger_output: {
      fields: lambda do |_|
        custom_fields = get('/api/client-field')&.
          map do |field|
            { name: field['handle'],
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id',  label: 'Contact id' },
          { name: 'first_name' },
          { name: 'last_name' },
          { name: 'email' },
          { name: 'mobile_phone' },
          { name: 'company',
            hint: 'The company at which the candidate currently works' },
          { name: 'titles', hint: 'The candidate’s current title' },
          { name: 'created', type: 'date_time', control_type: 'date_time' },
          { name: 'custom', label: 'Custom fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    },
    
    deal_fields_trigger_output: {
      fields: lambda do |_|
        custom_fields = get('/api/deal-custom-field')&.
          map do |field|
            { name: field['handle'],
              label: field['name'], type: field['type'] }
          end
        standard_fields = [
          { name: 'id', type: 'integer', control_type: 'number',
            label: 'Deal ID' },
          { name: 'name',label: 'Deal Name' },
          { name: 'amount',type: 'float' },
          { name: 'owner' },
          { name: 'stage' },
          { name: 'pipeline' },
          { name: 'custom', label: 'Custom fields',
            type: 'object', properties: custom_fields }
        ]
        call('format_schema', standard_fields)
      end
    }
  },

  test: ->(_connection) { get('/api/client-list') },

  actions: {
    

      log_interaction: {    #This is new and needs a little bit of work. See comments in the api payload request
      title: 'Log an interaction',
      subtitle: 'Log an interaction',
      description: lambda do
        "Log <span class='provider'>an interaction</span> in <span class='provider'>Kizen</span>"
      end,
      
          input_fields: lambda do
        [
          { name: "client_id",Label: "Contact ID", optional: false},
          { name: "business_id",Label: "Business ID", optional: false},
          { name: "name",Label: "Interaction Name", optional: false},
          { name: "property_label1",Label: "Property Label 1", optional: true},
          { name: "property_label2",Label: "Property Label 2", optional: true},
          { name: "property_input1",Label: "Property Input 1", optional: true},
          { name: "property_input2",Label: "Property Input 2", optional: true},
        ]
            
      end,
      
   
      
      
      execute: lambda do |_connection, input|
        label1 = input["property_label1"];
        label2 = input["property_label2"];

      post("https://app.kizen.com/api/interaction").
          payload(
            "business_id": input["business_id"],
            "client_id": input["client_id"],
            "name": input["name"],
            "properties": {
                 label1: input["property_input1"],    #this is incorrect. This is not pulling in the correct key value. #The Key value should be input["["property_label1"]
                 label2: input["property_input2"]     #need help from the workato team here on how to pull in the correct key value from input[property_label1]
                           }                  
            )
      end, 
 

   #         "properties": {
    ##             var1: input["property_input1"],
      #           var2: input["property_input2"]
       #                    }   
    output_fields: lambda do
          [
          { name: "id"}
          ]
      end,
      
    },


      log_activity: {     #This is new
      title: 'Log an Activity',
      subtitle: 'Log an Activity',
      description: lambda do
        "Log <span class='provider'>an activity</span> in <span class='provider'>Kizen</span>"
      end,
      
      input_fields: lambda do |object_definitions|
        object_definitions['log_activity_input']
      end,
      
      execute: lambda do |_connection, input|
      format_payload = call('format_payload', input)
      payload = format_payload.map do |key, value|
        if key.include?('custom_fields')
          custom_fields = value&.map do |k, v|
            { k.split('~').last =>
              {
                'field_id' => k.split('~').first,
                'value' => v
              } }
          end&.inject(:merge)
          { 'custom_fields' => custom_fields }
        else
          { key => value }
        end
      end.inject(:merge)
      result = post('/api/logged-activity', payload)
      
      formatted_response =
        result.map do |key, value|
          if key.include?('custom_fields')
            custom_fields = value.values&.map do |object|
              { object['field_id'] => object['value'] }
            end&.inject(:merge)

            { 'custom_fields' => custom_fields }
          else
            { key => value }
          end
        end&.inject(:merge)
      call('format_response', formatted_response.compact)
      end,
    
      output_fields: lambda do
          [
          { name: "id"}
        ]
      end,
    },
      find_contact_by_email: {             #This is new
      title: 'Find contact by email',
      subtitle: 'Find a contact in Kizen by email',
      description: lambda do
        "Find a contact <span class='provider'>contact</span> in <span class='provider'>Kizen by email</span>"
      end,
      
      input_fields: lambda do 
       [
          {
            name: 'email',
            label: 'Contact Email',
            optional: false
          }
        ]
      end,
      
      execute: lambda do |connection, input|
        results = get("https://app.kizen.com/api/client?email=#{input["email"]}")
        records = results["results"]
        puts records
        {
          events: records
        }
      end,
    
      output_fields: lambda do |object_definitions|
        { name: "events", type: "array", of: "object",
          properties: object_definitions["contact_fields_trigger_output"] }
      end
    },

      find_contact_by_id: {             #This is new
      title: 'Find contact by ID',
      subtitle: 'Find a contact in Kizen by ID',
      description: lambda do
        "Find a contact <span class='provider'>contact</span> in <span class='provider'>Kizen by ID</span>"
      end,
      
      input_fields: lambda do 
       [
          {
            name: 'id',
            label: 'Contact ID',
            optional: false
          }
        ]
      end,
      
      execute: lambda do |connection, input|
        result = get("https://app.kizen.com/api/client/#{input["id"]}")

        formatted_response =
        result.map do |key, value|
          if key.include?('custom_fields')
            custom_fields = value.values&.map do |object|
              { object['field_id'] => object['value'] }
            end&.inject(:merge)

            { 'custom_fields' => custom_fields }
          else
            { key => value }
          end
        end&.inject(:merge)
      call('format_response', formatted_response.compact)
      end,
    
      output_fields: lambda do |object_definitions|
        object_definitions['contact_fields_output']
      end
    
    },


      find_company_by_name: {             #This is new
      title: 'Find company by name',
      subtitle: 'Find a company in Kizen by name',
      description: lambda do
        "Find a company <span class='provider'>contact</span> in <span class='provider'>Kizen by name</span>"
      end,
      
      input_fields: lambda do 
       [
          {
            name: 'name',
            label: 'Company Name',
            optional: false
          }
        ]
      end,
      
      execute: lambda do |connection, input|
        results = get("https://app.kizen.com/api/company?search=#{input["name"]}")
        records = results["results"]
        puts records
        {
          events: records
        }
      end,
    
      output_fields: lambda do |object_definitions|
        { name: "events", type: "array", of: "object",
          properties: object_definitions["company_fields_trigger_output"] }
      end
    },

      find_deal_by_name: {            #This is new
      title: 'Find deal by name',
      subtitle: 'Find a deal in Kizen by name',
      description: lambda do
        "Find a deal <span class='provider'>contact</span> in <span class='provider'>Kizen by name</span>"
      end,
      
      input_fields: lambda do 
       [
          {
            name: 'name',
            label: 'Deal Name',
            optional: false
          }
        ]
      end,
      
      execute: lambda do |connection, input|
        results = get("https://app.kizen.com/api/deal?search=#{input["name"]}")
        records = results["results"]
        puts records
        {
          events: records
        }
      end,
    
      output_fields: lambda do |object_definitions|
        { name: "events", type: "array", of: "object",
          properties: object_definitions["deal_fields_trigger_output"] }
      end
    },
    create_order: {     #This is new
      title: 'Create order',
      
      
    input_fields: lambda do
        [
          { name: "email", optional: false },
          { name: "order_status", optional: false, control_type: "select", pick_list: "order_status" },
          { name: "order_number", optional: false, hint: "This must be an integer" },
          { name: "created", optional: false, hint: "(YYYY-MM-DD)" },
          { name: "sku", label: "SKU",optional: false },
          { name: "name", optional: false,label:"Product Name" },
          { name: "price", optional: false },
          { name: "quantity", optional: false , hint: "This must be a number without decimal places. Example - 1.00 will not work."},
        ]
      end,
      
      
      
      
      
      execute: lambda do |_connection, input|
      post("https://app.kizen.com/api/commerce/orders").
          payload(
            "order_status": input["order_status"],
            "order_number": input["order_number"],
            "created": input["created"],
            "client": { "email": input["email"],
            "upload":true,
            },
            "line_items": [{"price": input["price"], "sku": input["sku"], "name": input["name"],"quantity": input["quantity"]}]
      
              
                  
            )
      end, 
    
    output_fields: lambda do
          [
          { name: "id"},
            { name: "cart"},
            { name: "client"}
        ]
      end,
      
    }
    
  },
  triggers: {
   
    new_order: {         
      title: 'New Order',
      subtitle: 'New Order in Kizen',
      description: lambda do
        "New <span class='provider'>Order</span> in <span class='provider'>Kizen</span>"
      end,

      poll: lambda do |_connection, _input, page|
        page_size = 50
        page ||= 1
        response = get("https://app.kizen.com/api/commerce/orders").
                  params(order_by: 'created', 
                         order_type: 'asc', 
                         page: page,
                         per_page: page_size 
                        )
        records = response&.[]('results') || []
        page = records.size >= page_size ? page + 1 : 1 
        {
          events: records,
          next_page: page,
          can_poll_more: records.size >= page_size
        }
      end,
      
      dedup: lambda do |contact|
        contact['id']
      end,
      
      output_fields: lambda do
          [
          { name: "id"},
          {name: "client"},  
        ]
      end,

    },
   
    
    
        new_scheduled_activity: {  
      title: 'New Scheduled Activity',
      subtitle: 'New Scheduled Activity in Kizen',
      description: lambda do
        "New <span class='provider'>scheduled activity</span> in <span class='provider'>Kizen</span>"
      end,
      
      input_fields: lambda do
        [
          { name: 'activities',label: 'Activities', control_type: 'select', pick_list: 'activities', optional: false, toggle_hint: 'Select from list',
          toggle_field:{
            name: 'activities_id', label: 'Activities id', type: :string, control_type: "text", optional:false, toggle_hint: "Use Activities ID"}
          },
        ]
      end,

    
    
      poll: lambda do |_connection, input, page|
        page_size = 50
        activity_id = input['activities']
        puts (activity_id)
        page ||= 1
        response = get("https://app.kizen.com/api/scheduled-activity?activity_type=#{activity_id}").
                  params(order_by: 'created', 
                         order_type: 'asc', 
                         page: page,
                         per_page: page_size 
                        )
        
        
        puts response
        records = response&.[]('results') || []
        page = records.size >= page_size ? page + 1 : page
        {
          events: records,
          next_page: page,
          can_poll_more: records.size >= page_size
        }
      end,
      
      dedup: lambda do |deal|
        deal['id']
      end,
      
      output_fields: lambda do
          [
          { name: "id"},
            { name: "assigned_to"},
            { name: "client"},  #This is an array that needs to be split up. How can I do this? #Need workato's help on this one. 
            { name: "company"},
            { name: "deal"},
            { name: "scheduled"}
        ]
      end,

    },

updated_contact: {  #This is new

      input_fields: ->() {
      },

      poll: ->(connection, input, last_updated_since) {
        updated_since = last_updated_since || input['since'] || Time.now

        contacts = get("https://app.kizen.com/api/client-field-revision").
                  params(order_by: 'updated_at', 
                         order_type: 'asc', 
                         per_page: 2, 
                         updated_since: updated_since.to_time.utc.iso8601)
        
        contacts = contacts['results']

        next_updated_since = contacts.last['updated_at'] unless contacts.blank?


        {
          events: contacts,
          next_poll: next_updated_since,

          can_poll_more: contacts.length >= 2
        }
      },

      dedup: ->(contacts) {
        contacts['id']
      },

output_fields: lambda do
        [
          {
            name: "id"
          },
          {
            name: "client"
          },
          {
            name: "custom_field_name"
          },
          {
            name: "custom_field"
          },

          {
            name: "new_value"
          },
          
        ]
      end
    },
      new_logged_activity: {  #This is new
      title: 'New Logged Activity',
      subtitle: 'New Logged Activity in Kizen',
      description: lambda do
        "New <span class='provider'>logged activity</span> in <span class='provider'>Kizen</span>"
      end,
      
      input_fields: lambda do
        [
          { name: 'activities',label: 'Activities', control_type: 'select', pick_list: 'activities', optional: false, toggle_hint: 'Select from list',
          toggle_field:{
            name: 'activities_id', label: 'Activities id', type: :string, control_type: "text", optional:false, toggle_hint: "Use Activities ID"}
          },
        ]
      end,

    
    
      poll: lambda do |_connection, input, page|
        page_size = 50
        activity_id = input['activities']
        puts (activity_id)
        page ||= 1
        response = get("https://app.kizen.com/api/logged-activity?activity_type_id=#{activity_id}").
                  params(order_by: 'created', # Because we can only query by updated_since in this API.
                         order_type: 'asc', # We expect events in ascending order.
                         #activity_type: input['activities'],
                         page: page,
                         per_page: page_size # Small page size to help with testing
                        )
        
        
        puts response
        records = response&.[]('results') || []
        page = records.size >= page_size ? page + 1 : page
        {
          events: records,
          next_page: page,
          can_poll_more: records.size >= page_size
        }
      end,
      
      dedup: lambda do |deal|
        deal['id']
      end,
      
      output_fields: lambda do
          [
          { name: "id"},
            { name: "activity_type"},
            { name: "client"},  #This is an array that needs to be split up. How can I do this? #Need workato's help on this one
            { name: "company"},
            { name: "deal"},
            { name: "employee"},
            { name: "created"}
        ]
      end,

    }

  },
  pick_lists: {
      pipelines: ->(connection) {
      url = "https://app.kizen.com/api/deal-pipeline"
      get(url)['results'].pluck('name', 'id')  
    },
      activities: ->(connection) {
      url = "https://app.kizen.com/api/activity-type?fields=id,name,created"
      get(url).pluck('name', 'id')  
    },
    order_status: lambda do |connection|
      [
        # Display name, value
        ["paid","paid"]
      ]
    end,
  }
}
